# -*- coding: utf-8 -*-
"""movie recommendation system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AGfUEMentndMWGQcW_woCZx7kmfqy2Ii
"""

# Install the required libraries

!pip install pandas scikit-learn

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Sample dataset (you can replace this with a CSV load)

# Create a DataFrame
df = pd.read_csv('movies_metadata.csv')
df.head()


# Print the available columns to identify the correct column name
print(df.columns)

# Create a TF-IDF vectorizer
tfidf = TfidfVectorizer(stop_words='english')

df.head()

# Print the available columns to identify the correct column name
print(df.columns)

# prompt: what is column overview here

df.info()

# prompt: title of the movies

# Assuming the column containing movie titles is named 'title'
# (replace 'title' if your CSV has a different column name)

movie_titles = df['title'].tolist()

# Print the titles
for title in movie_titles:
  print(title)

# Replace NaN with an empty string
df['overview'] = df['overview'].fillna('')

# Compute the TF-IDF matrix for the descriptions
tfidf_matrix = tfidf.fit_transform(df['overview'])

# Compute the cosine similarity matrix
import numpy as np
from scipy.sparse import csr_matrix

# Transpose the tfidf_matrix to ensure correct dimensions for matrix multiplication
tfidf_matrix_transpose = tfidf_matrix.T

# Calculate the dot product using the transposed matrix
dot_product = tfidf_matrix.dot(tfidf_matrix_transpose)

print(dot_product)

# Function to get movie recommendations based on title
def get_recommendations(title, dot_product=dot_product):
    # Get the index of the movie that matches the title
    idx = df.index[df['title'] == title].tolist()[0]

    # Get the pairwise similarity scores of all movies with that movie
    sim_scores = list(enumerate(dot_product[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 5 most similar movies (excluding the first one which is the same movie)
    sim_scores = sim_scores[1:6]

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return the top 5 most similar movies
    return df['title'].iloc[movie_indices]

# Example Usage
if __name__ == "__main__":
    print("Movies similar to 'Cinderella':")
    recommendations = get_recommendations('Cinderella')
    print(recommendations)